#!/bin/sh

#Put into new variable for later use.
provide="$1"
package="fkdep-$1"

if (echo "$package" | grep -o "[^a-z0-9+.-]")
then
 echo "^ That character is illegal in a deb package name."
 exit 1
fi

if [ "$(dpkg -s "$package" 2> /dev/null | grep -o " installed")" = " installed" ]
then
 echo "You already have a package named \"$package\" installed."
 exit 2
fi

#Make new /tmp folder. If exists, append "_#"; # increments until it's unique.
base="/tmp/$package"
workDir="$base"
i=0;
while [ -e "$workDir" ]
do
 workDir="$base"_$i
 i=`expr $i + 1`
done
mkdir "$workDir"

debDir="$workDir/DEBIAN"
mkdir "$debDir"

#Using DEBIAN directory first as just a blank directory to generate data.tar.gz
cd "$debDir"
tar -czf "$workDir/data.tar.gz" .

#Now creating the actual DEBIAN files needed. Changelog:
echo "$package (1.0) unstable; urgency=low
  * Generated by fkdep!

 -- fkdep <fkdep@example.com>  $(date -R)" > "$debDir/changelog"

echo "Source: $package
Section: metapackages
Priority: extra
Maintainer: fkdep <fkdep@example.com>
Package: $package
Provides: $provide
Architecture: all
Version: 1.0
Depends: 
Description: Metapackage pretending to provide package $provide" > "$debDir/control"

echo "            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
                    Version 2, December 2004

 Copyright (C) 2004 Sam Hocevar <sam@hocevar.net>

 Everyone is permitted to copy and distribute verbatim or modified
 copies of this license document, and changing it is allowed as long
 as the name is changed.

            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. You just DO WHAT THE FUCK YOU WANT TO." > "$debDir/copyright"

#Package the control files, then clean them up.
tar -czf "$workDir/control.tar.gz" .
cd "$workDir"
rm -r "$debDir"

#echo "2.0" > debian-binary

#Build .deb, emulating the common GNU 'ar' format
deb="$package.deb"
touch "$deb"
#Grab current timestamp (and pat it to the right size just in case your clock's really off)
timestamp=$(printf '%-12s' $(date +%s -r "$deb"))
#Grab the size of the control.tar.gz
fileSize=$(wc -c < control.tar.gz)

echo "!<arch>
debian-binary   ${timestamp}0     0     100644  4         \`
2.0
control.tar.gz  ${timestamp}0     0     100644  $(printf '%-10s' $fileSize)\`" > "$deb"

cat control.tar.gz >> "$deb"

#Each file entry in ar is two-byte aligned; pad with newline filesize was odd.
if [ $(expr $fileSize % 2) -eq 1 ]
then
 printf "\n" >> "$deb"
fi

#Grab the size of the data.tar.gz
fileSize=$(wc -c < data.tar.gz)

echo "data.tar.gz     ${timestamp}0     0     100644  $(printf '%-10s' $fileSize)\`" >> "$deb"

#Repeat the file insert fand pad for data.tar.gz
cat data.tar.gz >> "$deb"
if [ $(expr $fileSize % 2) -eq 1 ]
then
 printf "\n" >> "$deb"
fi

